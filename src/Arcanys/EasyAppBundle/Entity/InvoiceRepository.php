<?php

namespace Arcanys\EasyAppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * InvoicecommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceRepository extends EntityRepository
{
    public function copyNewPartialInvoice($getID, $invoiceBalance)
    {
        // create new partial invoice and pointed to the approved section
        // ready for printing
        // copy new invoice
        $newrepo     = $this->getDoctrine()->getManager();
        $copyinvoice = $newrepo->getRepository('ArcanysEasyAppBundle:Invoice')
                               ->find($getID);

        $invoice = new Invoice();
        $invoice->setIdEntity($copyinvoice->getIdEntity());
        $invoice->setIdVendor($copyinvoice->getIdVendor());
        $invoice->setCheckNo($copyinvoice->getCheckNo());
        $invoice->setDueDate($copyinvoice->getDueDate());
        $invoice->setAmount($copyinvoice->getAmount());
        $invoice->setStatus('4');
        $invoice->setManagerApproval($copyinvoice->getManagerApproval());
        $invoice->setAddedby($copyinvoice->getAddedby());
        $invoice->setInvoicedate($copyinvoice->getInvoicedate());
        $invoice->setInvoicenumber($copyinvoice->getInvoicenumber());
        $invoice->setDescription($copyinvoice->getDescription());
        $invoice->setDeletestatus('1');
        $invoice->setReadstatus('1');
        $invoice->setChartOfAccounts($copyinvoice->getChartOfAccounts());
        $invoice->setToken($copyinvoice->getToken());
        $invoice->setOutstandingbalance($invoiceBalance);

        $em = $this->getDoctrine()->getManager();
        $em->persist($invoice);
        $em->flush();

        // copy new comments
        $newcommentrepo = $this->getDoctrine()->getManager();
        $copycomment    = $newcommentrepo->getRepository('ArcanysEasyAppBundle:Invoicecomments')
            ->find( array( 'invoicecommentId' => $copyinvoice->getInvoiceId() ) );

        if ( !empty($copycomment) ) {
            $getcomments = new Invoicecomments();
            $getcomments->setComments($copycomment->getComments());
            $getcomments->setAddedby($copycomment->getAddedby());
            $getcomments->setStatus('1');
            $getcomments->setInvoicecommentId($copycomment->getInvoicecommentId());

            $commentsrepo = $this->getDoctrine()->getManager();
            $commentsrepo->persist($getcomments);
            $commentsrepo->flush();
        }

        // copy new images
        $invoiceimgrepo = $this->getDoctrine()->getManager();
        $invoiceimg     = $invoiceimgrepo->getRepository('ArcanysEasyAppBundle:InvoiceImages')
            ->findBy( array('idInvoice' => $copyinvoice->getInvoiceId()) );

        if ( !empty($invoiceimg) ) {
            $getimages = new InvoiceImages();
            $getimages->setIdInvoice($invoiceimg->getIdInvoice());
            $getimages->setFileName($invoiceimg->getFileName());
            $getimages->setStatus($invoiceimg->getStatus());
            $getimages->setUpltoken($invoiceimg->getUpltoken());

            $em2 = $this->getDoctrine()->getManager();
            $em2->persist($getimages);
            $em2->flush();
        }
    }

    public function findByPendingAlert() {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
            ->from($this->_entityName, 'u')
            ->where('u.status = :status')
            ->andWhere('u.sentAt IS NULL')
            ->setParameters(['status' => 1]);

        return $qb->getQuery()->getResult();
    }
}
